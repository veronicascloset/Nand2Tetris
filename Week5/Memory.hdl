// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];


    PARTS:
    // Put your code here:

//select the memory type, !!make sure there is two ram case.
DMux4Way(in=true, sel=address[13..14], a=ram1, b= ram2, c=screen, d=kb);

//save it or not(RAM)
Or(a=ram1,b=ram2, out=ram);
Mux(a=false, b=load,sel=ram,out=lram);
RAM16K(in=in, load=lram, address=address[0..13], out=Ram1, out =Ram2);

//save it or not(SCREEN)
Mux(a=false, b=load,sel=screen,out=lscreen);
Screen(in=in, load=lscreen, address[0..12]=address[0..12], out=Screen);


Keyboard(out=Kb);


//READ THE DATA
Mux4Way16(a=Ram1, b=Ram2, c=Screen, d=Kb, sel= address[13..14], out=out);
//Register(in = out1, load = load, out = out, out = feedback);

}