// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:


Mux16(a[0..14]=instruction[0..14], b=ALUoutput, sel=instruction[15], out=Mux1);

//A register
//check if instruction A
Not(in=instruction[15], out=nota);
Or(a=instruction[15],b=instruction[5], out=check1);
ARegister(in=Mux1, load=instruction[5], out=Aout, out=Aoutpc, out[0..14]=addressM);

//Next level

Mux16(a=Aout, b=inM, sel=instruction[12], out = Mux2);

    //-D register
DRegister(in=ALUoutput, load=instruction[4], out = Dregister);



//PC JUMP ALGORITHM

//for j1 algorithm
And(a=instruction[2], b= ng, out=and1);

//for j2 algorithm
And(a=instruction[1], b=zr, out=and2);

//for j3 final check
//ng and zr check
Or(a=ng,b=zr,out=anda, out=anda1);//0

//j1 and j2 check
Or(a=instruction[2], b=instruction[1], out=comp, out=comp1);//0

//check if they are all 0 them jgt condition met
Or(a=anda, b=comp,out=check2);//should be 0

//check j3 is 1
Xor(a=check2, b=instruction[0], out=and4);

//check if j1 and j2 is both 0 
Mux(a=and4, b=true, sel=comp1, out=and6);

//check if ng and zr is 0
Mux(a=and6, b=false, sel=anda1,out=and5);

//check if j3 is 1
Mux(a=false, b=and5,sel=instruction[0], out=and3);


//combine
Or(a=and1, b=and2, out=and12);
Or(a=and12, b=and3, out=and123);

//check if instruction is C
And(a=and123,b=instruction[15], out=load);

//PC

PC(in=Aoutpc,load=load, inc=true, reset=reset, out[0..14]=pc);

//ALU

ALU(x=Dregister, y=Mux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr = zr, ng=ng);

//writeM

//check if instruction is C
And(a=instruction[15], b=instruction[3], out=writeM);
}